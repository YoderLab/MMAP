"""
Created on Feb 29, 2012

@author: Erin McKenney and Steven Wu
"""
from Bio import SeqIO
from core.component.run_component import RunComponent
from core.run_ext_prog import runExtProg
from distutils.dist import warnings

ASSEMBLE = "./assemble"
ASSEMBLE_NO_ITER_POSITION = 2
ASSEMBLE_INFILE_POSITION = 1

FINALIZE = "./finalize"
FINALIZE_CUTOFF_POSITION = 1
FINALIZE_OUTFILE_POSITION = 2
FINALIZE_INFILE_POSITION = 3

ALL_EXTS = [".status", ".dump1", ".dump.best"]

DEFAULT_GENOVO_NO_ITER = 10
DEFAULT_GENOVO_THRESH = 250


class RunGenovo(RunComponent):
    """
    classdocs

    """

    def __init__(self, infile, pdir, no_iter=DEFAULT_GENOVO_NO_ITER, thresh=DEFAULT_GENOVO_THRESH, wdir=None,
                 outfile=None, check_exist=True):
        """
        Constructor
        """
        self.all_exts = ALL_EXTS

        self.parameter_check(pdir, wdir, infile, outfile, check_exist, ".genovo")

        self.assemble = runExtProg(ASSEMBLE, pdir=self.pdir, length=2, check_OS=True)
        self.finalize = runExtProg(FINALIZE, pdir=self.pdir, length=3, check_OS=True)

        self.init_prog(no_iter, thresh)

    @classmethod
    def create_genovo(cls, setting):
        genovo = cls(infile=setting.get("genovo_infile"),
                     no_iter=setting.get("genovo_noI"),
                     thresh=setting.get("genovo_thresh"),
                     pdir=setting.get("genovo_pdir"),
                     wdir=setting.get("wdir"),
                     outfile=setting.get("genovo_outfile"),
                     check_exist=setting.get("check_exist"))
        return genovo

    @classmethod
    def create_genovo_from_setting(cls, setting_class):
        setting = setting_class.get_pars("genovo")
        genovo = RunGenovo.create_genovo(setting)
        return genovo

    def init_prog(self, no_iter, thresh):
        self.set_infile_name(self.infile)
        self.set_outfile(self.outfile)
        self.set_number_of_iter(no_iter)
        self.set_cutoff(thresh)

    def set_number_of_iter(self, param):

        v = self.check_valid_value(param, int)
#        try:
#            v = int(param)
#            if str(v) != str(param):
#                raise ValueError("ValueError: %s " % param)
#        except ValueError as e:
#            raise ValueError("ValueError: %s " % param)
        #
        if v > 0:
            self.assemble.set_param_at(v, ASSEMBLE_NO_ITER_POSITION)
        else:
            raise ValueError("Error: number of reads set to : %s" % param)



    def set_infile_name(self, infile):

        self.assemble.set_param_at(infile, ASSEMBLE_INFILE_POSITION)
        self.finalize.set_param_at(infile + ".dump.best",
                                   FINALIZE_INFILE_POSITION)

    def set_outfile(self, outfile):
        self.finalize.set_param_at(outfile, FINALIZE_OUTFILE_POSITION)

    def set_cutoff(self, param):

        v = self.check_valid_value(param, int)
#        try:
#            v = int(param)
#            if str(v) != str(param):
#                raise ValueError("ValueError: %s " % param)
#        except ValueError as e:
#            if type(param) is str:
#                raise TypeError("TypeError: %s is str" % param)
#            else:
#                raise ValueError("ValueError: %s " % param)

            #
        if v > 0:
            self.finalize.set_param_at(v, FINALIZE_CUTOFF_POSITION)
        else:
            raise ValueError("Error: cutoff set to : %s" % param)



    def read_outfile(self):
        """
        use SeqIO.index(file, "fast") to read the result seq file,
        generated from ./finalize
        TODO: check outfile exist, properly generated by ./finalize
        """
        self.record_index = SeqIO.index(self.outfile, "fasta")
        return self.record_index

    def run(self, debug=False):
        isComplete = self._isCompleted(False)
        if isComplete:
            print "Warning!!! Genovo outfiles already exist, skip Genovo!!!"
        else:
            print "Running Genovo assemble..."
            self.assemble.run(debug)
            print "Running Genovo finalize..."
            self.finalize.run(debug)
        self._isCompleted(True)



    def _isCompleted(self, is_raise_error):
        isComplete = self.check_outfiles_with_filetag_exist(self.infile, is_raise_error) and self.is_file_exist(self.outfile, is_raise_error)
        if is_raise_error and not isComplete:
            raise(StandardError("Genovo did not complete, not all output files exist"))
        return isComplete

"""
Created on Oct 1, 2015

@author: Steven Wu
"""
from Bio import SeqIO
from core.component.run_component import RunComponent
from core.run_ext_prog import runExtProg


ASSEMBLE = "./assemble"
ASSEMBLE_NO_ITER_POSITION = 2
ASSEMBLE_INFILE_POSITION = 1

FINALIZE = "./finalize"
FINALIZE_CUTOFF_POSITION = 1
FINALIZE_OUTFILE_POSITION = 2
FINALIZE_INFILE_POSITION = 3

ALL_EXTS = [".status", ".dump1", ".dump.best"]

DEFAULT_XGENOVO_NO_ITER = 10
DEFAULT_XGENOVO_THRESH = 250
DEFAULT_OUTFILE_EXT = ".xgenovo"


class RunXGenovo(RunComponent):
    """
    classdocs

    """

    def __init__(self, pdir, wdir, infile, no_iter=DEFAULT_XGENOVO_NO_ITER, thresh=DEFAULT_XGENOVO_THRESH,
                 outfile=None, check_exist=True):
        """
        Constructor
        """
        super(RunXGenovo, self).__init__(pdir, wdir, infile, check_exist)
        self.all_exts = ALL_EXTS

        self.outfile = self.check_outfile_filename(outfile, ".xgenovo")
#         self.parameter_check(self.pdir, self.wdir, infile, outfile, check_exist, ".genovo")

        self.assemble = runExtProg(ASSEMBLE, pdir=self.pdir, length=2, check_OS=True)
        self.finalize = runExtProg(FINALIZE, pdir=self.pdir, length=3, check_OS=True)

        self.init_prog(no_iter, thresh)

    @classmethod
    def create_xgenovo(cls, setting):
        xgenovo = cls(pdir=setting.get("assembler_pdir"),
                     wdir=setting.get("wdir"),
                     infile=setting.get("assembler_infile"),
                     no_iter=setting.get("xgenovo_num_iter"),
                     thresh=setting.get("xgenovo_thresh"),
                     outfile=setting.get("assembler_outfile"),
                     check_exist=setting.get("check_exist"))
        return xgenovo

    @classmethod
    def create_xgenovo_from_setting(cls, setting_class):
#         setting = setting_class.check_parameters_program("genovo")
        xgenovo = RunXGenovo.create_xgenovo(setting_class.all_setting)
        return xgenovo


    def init_prog(self, no_iter, thresh):
        self.set_infile_name(self.infile)
        self.set_outfile(self.outfile)
        self.set_assemble_number_of_iter(no_iter)
        self.set_finalize_cutoff(thresh)


    def set_infile_name(self, infile):

        self.assemble.set_param_at(infile, ASSEMBLE_INFILE_POSITION)
        self.finalize.set_param_at(infile + ".dump.best",
                                   FINALIZE_INFILE_POSITION)

    def set_outfile(self, outfile):
        self.finalize.set_param_at(outfile, FINALIZE_OUTFILE_POSITION)

    def set_assemble_number_of_iter(self, param):

        v = self.check_valid_value(param, int)
        if v > 0:
            self.assemble.set_param_at(v, ASSEMBLE_NO_ITER_POSITION)
        else:
            raise ValueError("Error: number of reads set to : %s" % param)

    def set_finalize_cutoff(self, param):

        v = self.check_valid_value(param, int)
        if v > 0:
            self.finalize.set_param_at(v, FINALIZE_CUTOFF_POSITION)
        else:
            raise ValueError("Error: cutoff set to : %s" % param)



    def run(self, debug=False):
        isComplete = self._isCompleted(False)
        if isComplete:
            print "==Warning: XGenovo outfiles already exist, skip XGenovo!!!=="
        else:
            print "Running XGenovo assemble..."
            self.assemble.run(debug)
            print "Running XGenovo finalize..."
            self.finalize.run(debug)
        self._isCompleted(True)



    def read_outfile(self):
        """
        use SeqIO.index(file, "fast") to read the result seq file,
        generated from ./finalize
        TODO: check outfile exist, properly generated by ./finalize
        """
        self.record_index = SeqIO.index(self.outfile, "fasta")
        return self.record_index


    def _isCompleted(self, is_raise_error):
        isComplete = self.check_outfiles_with_filetag_exist(self.infile, is_raise_error) and self.is_file_exist(self.outfile, is_raise_error)
        if is_raise_error and not isComplete:
            raise(StandardError("XGenovo did not complete, not all output files exist"))
        return isComplete
